{
  "Comment": "A description of my state machine",
  "StartAt": "Get event inputs",
  "States": {
    "Get event inputs": {
      "Type": "Pass",
      "Next": "Is Relevant Status",
      "Assign": {
        "icav2AnalysisId": "{% $states.input.id %}",
        "status": "{% $states.input.status %}",
        "name": "{% $states.input.userReference %}"
      }
    },
    "Is Relevant Status": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Is Terminal Status",
          "Condition": "{% /* https://try.jsonata.org/l5wpTUNXI */\n$status in [\n    \"INITIALIZING\",\n    \"IN_PROGRESS\",\n    \"SUCCEEDED\",\n    \"FAILED\",\n    \"FAILED_FINAL\",\n    \"ABORTED\"\n] %}",
          "Comment": "Is relevant status"
        }
      ],
      "Default": "Placeholder"
    },
    "Is Terminal Status": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Get Log Directories",
          "Condition": "{% $status in [\n    \"SUCCEEDED\",\n    \"FAILED\",\n    \"FAILED_FINAL\",\n    \"ABORTED\"\n] %}",
          "Comment": "Is terminal status"
        }
      ],
      "Default": "Update WES API"
    },
    "Update WES API": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__update_status_on_wes_api_lambda_function_arn__}",
        "Payload": {
          "name": "{% $name %}",
          "status": "{% /* https://try.jsonata.org/WVD2IGYzV */\n(\n  $statusMap := {\n    \"INITIALIZING\": \"STARTING\",\n    \"IN_PROGRESS\": \"RUNNING\",\n    \"SUCCEEDED\": \"SUCCEEDED\",\n    \"FAILED\": \"FAILED\",\n    \"ABORTED\": \"ABORTED\"\n  };\n  $lookup($statusMap, $status)\n) %}",
          "icav2AnalysisId": "{% $icav2AnalysisId %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true,
      "Output": {}
    },
    "Get Log Directories": {
      "Type": "Parallel",
      "Next": "Move logs dir",
      "Branches": [
        {
          "StartAt": "Get Project ID from ICAv2 Wes Object",
          "States": {
            "Get Project ID from ICAv2 Wes Object": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__get_icav2_wes_object_lambda_function_arn__}",
                "Payload": {
                  "name": "{% $name %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Get Src Logs Dir",
              "Assign": {
                "projectId": "{% $states.result.Payload.icav2WesObject.engineParameters.projectId %}"
              }
            },
            "Get Src Logs Dir": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_logs_dir_lambda_function_arn__}",
                "Payload": {
                  "projectId": "{% $projectId %}",
                  "analysisId": "{% $icav2AnalysisId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Output": {
                "icaLogsDirUriSrc": "{% $states.result.Payload.icaLogsDirUri %}"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Dest Logs Dir",
          "States": {
            "Get Dest Logs Dir": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Arguments": {
                "FunctionName": "${__get_icav2_wes_object_lambda_function_arn__}",
                "Payload": {
                  "name": "{% $name %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true,
              "Output": {
                "icaLogsDirUriDest": "{% $states.result.Payload.icav2WesObject.engineParameters.logsUri %}"
              }
            }
          }
        }
      ],
      "Output": {
        "icaLogsDirUriSrc": "{% $states.result[0].icaLogsDirUriSrc %}",
        "icaLogsDirUriDest": "{% $states.result[1].icaLogsDirUriDest %}"
      }
    },
    "Move logs dir": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
      "Arguments": {
        "Entries": [
          {
            "DetailType": "${__icav2_data_copy_sync_detail_type__}",
            "EventBusName": "${__external_event_bus_name__}",
            "Source": "${__stack_source__}",
            "Detail": {
              "payload": {
                "sourceUriList": ["{% $states.input.icaLogsDirUriSrc %}"],
                "destinationUri": "{% $states.input.icaLogsDirUriDest %}"
              },
              "taskToken": "{% $states.context.Task.Token %}"
            }
          }
        ]
      },
      "Next": "Delete Src Logs Dir",
      "Output": "{% $states.input %}",
      "HeartbeatSeconds": 3600,
      "Retry": [
        {
          "ErrorEquals": ["Sfn.TaskTimedOutException"],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 10
        }
      ]
    },
    "Delete Src Logs Dir": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__delete_icav2_dir_lambda_function_arn__}",
        "Payload": {
          "directoryUri": "{% $states.input.icaLogsDirUriSrc %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Update WES API",
      "Output": {},
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Update WES API"
        }
      ]
    },
    "Placeholder": {
      "Type": "Pass",
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
